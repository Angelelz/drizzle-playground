// db.ts
	select(): MySqlSelectBuilder<undefined, TPreparedQueryHKT>;
	select<TSelection extends SelectedFields>(
		fields: TSelection,
	): MySqlSelectOnly<undefined, TSelection, 'partial', {}>;
	select(
		fields?: SelectedFields,
	):
		| MySqlSelectBuilder<SelectedFields | undefined, TPreparedQueryHKT>
		| MySqlSelectOnly<undefined, SelectedFields, 'partial', {}>
	{
		if (fields) {
			return new MySqlSelectOnly({
				fields,
				session: this.session,
				dialect: this.dialect,
				joinsNotNullableMap: {},
			});
		}
		return new MySqlSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });
	}

//dialect.ts

	buildSelectOnlyQuery(
		{
			withList,
			fields,
			fieldsFlat,
			orderBy,
			groupBy,
			limit,
			offset,
			distinct,
		}: {
			withList?: Subquery[];
			fields: Record<string, unknown>;
			fieldsFlat?: SelectedFieldsOrdered;
			limit?: number | Placeholder;
			offset?: number | Placeholder;
			orderBy?: (MySqlColumn | SQL | SQL.Aliased)[];
			groupBy?: (MySqlColumn | SQL | SQL.Aliased)[];
			distinct?: boolean;
		},
	): SQL {
		const fieldsList = fieldsFlat ?? orderSelectedFields<MySqlColumn>(fields);
		for (const f of fieldsList) {
			if (is(f.field, Column)) {
				const tableName = getTableName(f.field.table);
				throw new Error(
					`You cannot reference a table: "${tableName}" for field: "${f.field.name}" without using .from() method`,
				);
			}
		}

		let withSql: SQL | undefined;
		if (withList?.length) {
			const withSqlChunks = [sql`with `];
			for (const [i, w] of withList.entries()) {
				withSqlChunks.push(sql`${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);
				if (i < withList.length - 1) {
					withSqlChunks.push(sql`, `);
				}
			}
			withSqlChunks.push(sql` `);
			withSql = sql.join(withSqlChunks);
		}

		const distinctSql = distinct ? sql` distinct` : undefined;

		const selection = this.buildSelection(fieldsList, { isSingleTable: true });

		let orderBySql;
		if (orderBy && orderBy.length > 0) {
			orderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;
		}

		let groupBySql;
		if (groupBy && groupBy.length > 0) {
			groupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;
		}

		const limitSql = limit ? sql` limit ${limit}` : undefined;

		const offsetSql = offset ? sql` offset ${offset}` : undefined;

		return sql`${withSql}select${distinctSql} ${selection} ${groupBySql}${orderBySql}${limitSql}${offsetSql}`;
	}


export class MySqlSelectOnly<
	TTableName extends string | undefined,
	TSelection extends ColumnsSelection,
	TSelectMode extends SelectMode,
	TNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>
		: {},
> extends MySqlSetOperatorBuilder<
	TTableName,
	TSelection,
	TSelectMode,
	PreparedQueryHKTBase,
	TNullabilityMap
> {
	static readonly [entityKind]: string = 'MySqlSetOperator';

	protected joinsNotNullableMap: Record<string, boolean>;
	protected withList: Subquery[];
	protected distinct: boolean | undefined;
	protected config: {
		fields: Record<string, unknown>;
		limit?: number | Placeholder;
		orderBy?: (MySqlColumn | SQL | SQL.Aliased)[];
		offset?: number | Placeholder;
	};
	/* @internal */
	readonly session: MySqlSession | undefined;
	protected dialect: MySqlDialect;

	constructor(config: {
		fields: TSelection;
		session: MySqlSession | undefined;
		dialect: MySqlDialect;
		withList?: Subquery[];
		distinct?: boolean;
		joinsNotNullableMap: Record<string, boolean>;
	}) {
		super();

		this._ = {
			selectedFields: config.fields,
		} as this['_'];

		this.session = config.session;
		this.dialect = config.dialect;
		this.joinsNotNullableMap = config.joinsNotNullableMap;
		this.withList = config.withList ?? [];
		this.distinct = config.distinct;
		this.config = {
			fields: config.fields,
		};
	}

	from<TFrom extends MySqlTable | Subquery | MySqlViewBase | SQL>(
		source: TFrom,
	): CreateMySqlSelectFromBuilderMode<
		'db',
		GetSelectTableName<TFrom>,
		TSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,
		TSelection extends undefined ? 'single' : 'partial',
		PreparedQueryHKTBase
	> {
		let fields: SelectedFields;
		if (this.config.fields) {
			fields = this.config.fields as any;
		} else if (is(source, Subquery)) {
			// This is required to use the proxy handler to get the correct field values from the subquery
			fields = Object.fromEntries(
				Object.keys(source[SubqueryConfig].selection).map((
					key,
				) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),
			);
		} else if (is(source, MySqlViewBase)) {
			fields = source[ViewBaseConfig].selectedFields as SelectedFields;
		} else if (is(source, SQL)) {
			fields = {};
		} else {
			fields = getTableColumns<MySqlTable>(source);
		}

		return new MySqlSelect(
			{
				table: source,
				fields,
				isPartialSelect: true,
				session: this.session,
				dialect: this.dialect,
				withList: this.withList,
				distinct: this.distinct,
			},
		) as any;
	}

	orderBy(
		...columns:
			| [(aliases: TSelection) => ValueOrArray<MySqlColumn | SQL | SQL.Aliased>]
			| (MySqlColumn | SQL | SQL.Aliased)[]
	) {
		if (typeof columns[0] === 'function') {
			const orderBy = columns[0](
				new Proxy(
					this.config.fields,
					new SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),
				) as TSelection,
			);
			const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
			if (orderByArray.some((order) => is(order, MySqlColumn))) {
				throw new Error('Cannot order by a column without using .from()');
			}
			this.config.orderBy = orderByArray;
		} else {
			if (columns.some((order) => is(order, MySqlColumn))) {
				throw new Error('Cannot order by a column without using .from()');
			}
			this.config.orderBy = columns as (SQL | SQL.Aliased)[];
		}
		return this;
	}

	limit(limit: number) {
		this.config.limit = limit;
		return this;
	}

	offset(offset: number | Placeholder) {
		this.config.offset = offset;
		return this;
	}

	/** @internal */
	override getSQL(): SQL<unknown> {
		return this.dialect.buildSelectOnlyQuery(this.config);
	}

	toSQL(): Query {
		const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
		return rest;
	}

	prepare() {
		if (!this.session) {
			throw new Error('Cannot execute a query on a query builder. Please use a database instance instead.');
		}
		const fieldsList = orderSelectedFields<MySqlColumn>(this.config.fields);
		const query = this.session.prepareQuery<
			PreparedQueryConfig & { execute: SelectResult<TSelection, TSelectMode, TNullabilityMap>[] },
			MySql2PreparedQueryHKT
		>(this.dialect.sqlToQuery(this.getSQL()), fieldsList);
		query.joinsNotNullableMap = this.joinsNotNullableMap;
		return query as PreparedQueryKind<
			MySql2PreparedQueryHKT,
			PreparedQueryConfig & {
				execute: SelectResult<TSelection, TSelectMode, TNullabilityMap>[];
				iterator: SelectResult<TSelection, TSelectMode, TNullabilityMap>;
			},
			true
		>;
	}

	execute = ((placeholderValues) => {
		return this.prepare().execute(placeholderValues);
	}) as ReturnType<this['prepare']>['execute'];

	private createIterator = (): ReturnType<this['prepare']>['iterator'] => {
		const self = this;
		return async function*(placeholderValues) {
			console.log('placeholderValues', placeholderValues);
			yield* self.prepare().iterator(placeholderValues);
		};
	};

	iterator = this.createIterator();

	as<TAlias extends string>(
		alias: TAlias,
	): SubqueryWithSelection<BuildSubquerySelection<TSelection, TNullabilityMap>, TAlias, 'mysql'> {
		return new Proxy(
			new Subquery(this.getSQL(), this.config.fields, alias),
			new SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),
		) as SubqueryWithSelection<BuildSubquerySelection<TSelection, TNullabilityMap>, TAlias, 'mysql'>;
	}
}
